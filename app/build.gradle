plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization' // Add serialization plugin
    id 'com.google.devtools.ksp' // use KSP instead of KAPT to avoid kapt/JDK module access issues
}

import java.util.Properties

// Load or create version properties file at project root
def versionPropsFile = rootProject.file('version.properties')
def versionProps = new Properties()
if (versionPropsFile.exists()) {
    versionProps.load(new FileInputStream(versionPropsFile))
} else {
    versionProps.setProperty('VERSION_CODE', '1')
    versionProps.setProperty('VERSION_NAME', '1.0.0')
    versionProps.store(new FileOutputStream(versionPropsFile), null)
}

def versionCodeFromProps = Integer.parseInt(versionProps.getProperty('VERSION_CODE'))
def versionNameFromProps = versionProps.getProperty('VERSION_NAME')

android {
    namespace 'com.bloodsugar.app'
    compileSdk 34

    defaultConfig {
        applicationId "com.bloodsugar.app"
        minSdk 24
        targetSdk 34
        versionCode versionCodeFromProps
        versionName versionNameFromProps

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // Make version name accessible in code
        buildConfigField "String", "VERSION_NAME", "\"${versionName}\""
        buildConfigField "int", "VERSION_CODE", "${versionCode}"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        buildConfig true
    }

    // Ensure the Compose compiler version matches the Kotlin plugin
    composeOptions {
        kotlinCompilerExtensionVersion = '1.5.4'
    }

    // Ensure version code increments before building
    tasks.whenTaskAdded { task ->
        if (task.name.toLowerCase().startsWith('pre')) {
            task.dependsOn 'incrementVersionCode'
        }
    }
}

// Task to increment VERSION_CODE in version.properties
task incrementVersionCode {
    doLast {
        def props = new Properties()
        props.load(new FileInputStream(versionPropsFile))
        // Increment code
        def code = Integer.parseInt(props.getProperty('VERSION_CODE'))
        code = code + 1
        props.setProperty('VERSION_CODE', code.toString())

        // Increment patch in VERSION_NAME (semantic versioning: major.minor.patch)
        def vn = props.getProperty('VERSION_NAME')
        if (vn == null || vn.trim() == '') {
            vn = '1.0.0'
        }
        def parts = vn.tokenize('.')
        if (parts.size() < 3) {
            // normalize to three parts
            while (parts.size() < 3) parts << '0'
        }
        try {
            def patch = Integer.parseInt(parts[2])
            patch = patch + 1
            parts[2] = patch.toString()
        } catch(Exception e) {
            // fallback: append 1
            parts[2] = '1'
        }
        def newVn = parts.join('.')
        props.setProperty('VERSION_NAME', newVn)

        // store back
        props.store(new FileOutputStream(versionPropsFile), null)
        println "Bumped VERSION_CODE to ${code} and VERSION_NAME to ${newVn}"
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation platform('androidx.compose:compose-bom:2023.10.01')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.navigation:navigation-compose:2.7.5'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.7.0'

    // Force Kotlin stdlib to the plugin-compatible version
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.20'

    // DataStore for persisting unit preference
    implementation 'androidx.datastore:datastore-preferences:1.1.0'

    // Kotlin Serialization for JSON backup/restore
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0'

    // Room components using KSP (replace kapt with ksp)
    implementation 'androidx.room:room-runtime:2.6.1'
    implementation 'androidx.room:room-ktx:2.6.1'
    ksp 'androidx.room:room-compiler:2.6.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2023.10.01')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}

// Force resolution of Kotlin artifacts to 1.9.20 to avoid mixed Kotlin stdlib versions
configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'org.jetbrains.kotlin') {
            details.useVersion '1.9.20'
            details.because 'Align Kotlin stdlib with the Kotlin Gradle plugin (1.9.20) to keep KSP/Room compatible.'
        }
    }

    // Force Compose compiler to a version compatible with Kotlin 1.9.20
    resolutionStrategy.force 'androidx.compose.compiler:compiler:1.5.4'
}
